{"version":3,"sources":["node_one.js","Todolist/Todoing.js","Todolist/Todoinput.js","Request.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoing","this","props","todo","map","item","idx","key","onClick","delTodo","Todoinput","handleChange","e","setState","target","name","parseInt","value","handleInput","keyCode","addTodo","state","n1","n2","onChange","onKeyDown","type","Request","data","fetch","method","body","then","res","json","console","log","result","index","album_title","author","ReactDOM","render","document","getElementById"],"mappings":"2OAKuBA,Y,MCHFC,E,iLACP,IAAD,OACL,OACI,6BACI,wDACA,4BACKC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKF,GAAOA,EAAhB,OAAyB,4BAAQG,QAAS,kBAAI,EAAKN,MAAMO,QAAQH,KAAxC,oB,GANzCP,a,QC+BhBW,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,aAAa,SAACC,GACV,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAMC,SAASJ,EAAEE,OAAOG,UAT7B,EAYbC,YAAa,SAACN,GACO,KAAdA,EAAEO,SACD,EAAKjB,MAAMkB,QAAQR,EAAEE,OAAOG,QAZhC,EAAKI,MAAM,CACPC,GAAG,EACHC,GAAG,GAJE,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOR,KAAK,KAAKS,SAAU,SAACZ,GAAD,OAAK,EAAKD,aAAaC,IAAIK,MAAOhB,KAAKoB,MAAMJ,MAAOQ,UAAWxB,KAAKiB,YAAaQ,KAAK,SADrH,IAGI,2BAAOX,KAAK,KAAKS,SAAU,SAACZ,GAAD,OAAK,EAAKD,aAAaC,IAAIK,MAAOhB,KAAKoB,MAAMJ,MAAOQ,UAAWxB,KAAKiB,YAAaQ,KAAK,SACjH,2BAAIzB,KAAKoB,MAAMC,GAAKrB,KAAKoB,MAAME,IAC/B,qD,GAzBuBxB,aC9BlB4B,GCCiB5B,Y,kBDAlC,aAAc,IAAD,8BACT,+CACKsB,MAAQ,CACTO,KAAK,IAHA,E,iFAMO,IAAD,OACf,IACIC,MAAM,sDACN,CAACC,OAAO,OAAOC,KAAK,eACnBC,MAAK,SAACC,GACH,OAAOA,EAAIC,UAEdF,MAAK,SAACC,GACHE,QAAQC,IAAIH,GACZ,EAAKpB,SAAS,CACVe,KAAKK,EAAII,YAGpB,MAAMzB,GACHuB,QAAQC,IAAIxB,M,+BAYhB,OACI,6BACI,wDACA,4BAEQX,KAAKoB,MAAMO,KAAKxB,KACZ,SAACC,EAAKiC,GAAN,OACI,wBAAI/B,IAAK+B,GACL,4BAAKjC,EAAKkC,aACV,2BAAIlC,EAAKmC,kB,GA1CRzC,cEKrC0C,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,W","file":"static/js/main.3ba8b251.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n//类定义组件\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name:'React',\r\n            time: new Date().toLocaleTimeString()\r\n        }\r\n        console.log('constructor',this.props.word);\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            console.log(1);\r\n            this.setState({\r\n                time:new Date().toLocaleTimeString()\r\n            })\r\n        },1000);\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        // console.log('getsnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        // console.log('didupdate');\r\n    }\r\n    handleClick=(num,e)=>{\r\n        console.log(num,e);\r\n    }\r\n    render(){\r\n        setInterval(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleTimeString()\r\n            })\r\n        },1000)\r\n\r\n        return(\r\n            <Fragment>\r\n                <div onClick={this.handleClick}>Hello,world{this.state.time}</div>{/**绑定函数 */}\r\n                <div onClick={(e)=>this.handleClick(212,e)}>212</div>\r\n                {/* <div onClick={this.handleClick.bind(this,num)}>11223</div> */}\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n// ReactDOM.render(<ShowTime word='react'/>,document.getElementById('root'));\r\n\r\n//默认导出，只能导出一次\r\n// export default ShowTime;\r\n//命名导出\r\nexport{ShowTime};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行</h1>\r\n                <ul>\r\n                    {this.props.todo.map((item,idx)=><li key={item}>{item}----<button onClick={()=>this.props.delTodo(idx)}>delete</button></li>)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// Todoing.propType = {\r\n//     todo:PropType.string\r\n// }\r\n","import React, { Component } from 'react'\r\n\r\n//子组件 --> 父组件传递数据，调用子组件时往子组件传递一个函数\r\n//子组件通过props 调用该函数\r\n\r\n//非受控组件\r\n// export default class Todoinput extends Component{\r\n//     constructor(){\r\n\r\n//     }\r\n//     componentDidMount(){\r\n//         console.log(this.inp.value);\r\n//         console.log(this.refs);\r\n//     }\r\n//     search =()=>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n//         return (\r\n//             <div>\r\n//                 <input ref='a'type=\"text\"/>\r\n//                 {/* <input type=\"text\" ref={(inp)=>this.inp = inp}/> */}\r\n//                 <button onClick={this.search}>查询</button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n\r\n//受控组件和非受控组件\r\n//受控组件：value值被react的状态控制\r\n//可以方便拿到input框的值，实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            n1:0,\r\n            n2:0 \r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value)\r\n        })\r\n    }\r\n    handleInput =(e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input name='n1' onChange={(e)=>this.handleChange(e)} value={this.state.value} onKeyDown={this.handleInput} type=\"text\"></input>\r\n                +\r\n                <input name='n2' onChange={(e)=>this.handleChange(e)} value={this.state.value} onKeyDown={this.handleInput} type=\"text\"></input>\r\n                <p>{this.state.n1 + this.state.n2}</p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Axios from 'axios'\r\n\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        try{\r\n            fetch('https://api.apiopen.top/musicRankingsDetails?type=1',\r\n            {method:'post',body:'{name:123}'})\r\n            .then((res)=>{\r\n                return res.json();\r\n            })\r\n            .then((res)=>{\r\n                console.log(res);\r\n                this.setState({\r\n                    data:res.result\r\n                })\r\n            })\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n        \r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         this.setState({\r\n        //             data:res.data.result\r\n        //         })\r\n        //         console.log(res);\r\n        //     })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n    }\r\n    addItem = (msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        })\r\n        // console.log(this.state.todo)\r\n    }\r\n    delItem = (a)=>{\r\n        // this.state.todo.splice(a,1);\r\n        //深拷贝\r\n        //拷贝出来进行数据处理\r\n        var todo = [...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo:this.state.todo\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing todo={this.state.todo} delTodo={this.delItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ShowTime} from './node_one';//引入外部文件\nimport Todolist from './Todolist/Todolist';\nimport Request from './Request'\n\n// ReactDOM.render(<Todolist/>,document.getElementById('root'));\nReactDOM.render(<Request/>,document.getElementById('root'));\n\n\n// ReactDOM.render(<ShowTime word='react'/>,document.getElementById('root'));\n//组件交互\n//父组件 -> 子组件：调用时在子组件上添加属性\n//在子组件中通过props 获取数据\n\n/*\nconsole.log();\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'hello',\n    React.createElement(\n        'h1',\n        {'id':'h'},\n        'react'\n    )\n);\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: ['hello',{\n            type: 'h1',\n            props: {\n                id: 'h',\n                class: 'h',\n                children: ['react']\n            }\n        }]\n    }\n}\n*/\n// 加载html文件，浏览器解析html生成DOM树\n// link加载css文件，解析css规则，生成render tree（渲染树），浏览器渲染引擎渲染render tree\n\n//页面回流（重排）页面内容、结构改变\n//页面重绘（把字体颜色等样式改变）\n\n\n// node.offsetLeft/node.offsetWidth等慎用\n\n\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1;\n//     root.style.width = width  + 'px';\n// },100)\n\n// display/width/height/font-size 等会引起页面回流\n// document.body.style.width = '10px';\n// document.body.style.height='10px';\n// 声明一个css的类\n// .change{\n//     width:100px;\n//     height:10px;\n// }\n// document.body.className = 'change';\n\n/*\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    var fragment = document.createDocumentFragment();\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i] === 'object'){\n                    render(props[item][i],ele);\n                }else{\n                    var txt = document.createTextNode(props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n\n\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\nrender(obj,document.getElementById('root'));\n\n*/\n//react创建元素后不可变\n// function tick(){\n//     const ele = <div>{new Date().toLocaleTimeString()}</div>;\n//     ReactDOM.render(ele,document.getElementById('root'));\n// }\n// setInterval(tick,1000);\n\n//函数定义组件（无生命周期）\n// function Hello(props){\n//     return <h1>Hello{props.name}</h1>\n// }\n// ReactDOM.render(<Hello name='React'/>,document.getElementById('root'));\n// function Todo(props){\n//     return (\n//         <div>\n//             {/*条件渲染 */}\n//             {props.list.length>=6 ? <h1>todo</h1>:''}\n//             {/* <h1>todo</h1> */}\n//             <ul>\n//                 {/*循环渲染*/}\n//                 {\n//                     props.list.map(function(item,index){\n//                         if(index%2 === 0)\n//                             return <li key={item}>{item}</li>\n//                     })\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}